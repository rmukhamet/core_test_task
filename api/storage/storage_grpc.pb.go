// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: api/storage/storage.proto

package storage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StorageClient is the client API for Storage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageClient interface {
	GetRetailerList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Retailers, error)
	GetRetailerByID(ctx context.Context, in *RetailerID, opts ...grpc.CallOption) (*Retailer, error)
	DeleteRetailer(ctx context.Context, in *RetailerID, opts ...grpc.CallOption) (*Empty, error)
	DeleteRetailerVersion(ctx context.Context, in *RetailerIDVersionID, opts ...grpc.CallOption) (*Empty, error)
	History(ctx context.Context, in *RetailerID, opts ...grpc.CallOption) (*Retailers, error)
	GetRetailerVersion(ctx context.Context, in *RetailerIDVersionID, opts ...grpc.CallOption) (*Retailer, error)
}

type storageClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageClient(cc grpc.ClientConnInterface) StorageClient {
	return &storageClient{cc}
}

func (c *storageClient) GetRetailerList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Retailers, error) {
	out := new(Retailers)
	err := c.cc.Invoke(ctx, "/storage.Storage/GetRetailerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetRetailerByID(ctx context.Context, in *RetailerID, opts ...grpc.CallOption) (*Retailer, error) {
	out := new(Retailer)
	err := c.cc.Invoke(ctx, "/storage.Storage/GetRetailerByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) DeleteRetailer(ctx context.Context, in *RetailerID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/storage.Storage/DeleteRetailer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) DeleteRetailerVersion(ctx context.Context, in *RetailerIDVersionID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/storage.Storage/DeleteRetailerVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) History(ctx context.Context, in *RetailerID, opts ...grpc.CallOption) (*Retailers, error) {
	out := new(Retailers)
	err := c.cc.Invoke(ctx, "/storage.Storage/History", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetRetailerVersion(ctx context.Context, in *RetailerIDVersionID, opts ...grpc.CallOption) (*Retailer, error) {
	out := new(Retailer)
	err := c.cc.Invoke(ctx, "/storage.Storage/GetRetailerVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageServer is the server API for Storage service.
// All implementations must embed UnimplementedStorageServer
// for forward compatibility
type StorageServer interface {
	GetRetailerList(context.Context, *Empty) (*Retailers, error)
	GetRetailerByID(context.Context, *RetailerID) (*Retailer, error)
	DeleteRetailer(context.Context, *RetailerID) (*Empty, error)
	DeleteRetailerVersion(context.Context, *RetailerIDVersionID) (*Empty, error)
	History(context.Context, *RetailerID) (*Retailers, error)
	GetRetailerVersion(context.Context, *RetailerIDVersionID) (*Retailer, error)
	mustEmbedUnimplementedStorageServer()
}

// UnimplementedStorageServer must be embedded to have forward compatible implementations.
type UnimplementedStorageServer struct {
}

func (UnimplementedStorageServer) GetRetailerList(context.Context, *Empty) (*Retailers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRetailerList not implemented")
}
func (UnimplementedStorageServer) GetRetailerByID(context.Context, *RetailerID) (*Retailer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRetailerByID not implemented")
}
func (UnimplementedStorageServer) DeleteRetailer(context.Context, *RetailerID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRetailer not implemented")
}
func (UnimplementedStorageServer) DeleteRetailerVersion(context.Context, *RetailerIDVersionID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRetailerVersion not implemented")
}
func (UnimplementedStorageServer) History(context.Context, *RetailerID) (*Retailers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method History not implemented")
}
func (UnimplementedStorageServer) GetRetailerVersion(context.Context, *RetailerIDVersionID) (*Retailer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRetailerVersion not implemented")
}
func (UnimplementedStorageServer) mustEmbedUnimplementedStorageServer() {}

// UnsafeStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageServer will
// result in compilation errors.
type UnsafeStorageServer interface {
	mustEmbedUnimplementedStorageServer()
}

func RegisterStorageServer(s grpc.ServiceRegistrar, srv StorageServer) {
	s.RegisterService(&Storage_ServiceDesc, srv)
}

func _Storage_GetRetailerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetRetailerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/GetRetailerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetRetailerList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetRetailerByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetailerID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetRetailerByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/GetRetailerByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetRetailerByID(ctx, req.(*RetailerID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_DeleteRetailer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetailerID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).DeleteRetailer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/DeleteRetailer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).DeleteRetailer(ctx, req.(*RetailerID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_DeleteRetailerVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetailerIDVersionID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).DeleteRetailerVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/DeleteRetailerVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).DeleteRetailerVersion(ctx, req.(*RetailerIDVersionID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_History_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetailerID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).History(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/History",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).History(ctx, req.(*RetailerID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetRetailerVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetailerIDVersionID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetRetailerVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/GetRetailerVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetRetailerVersion(ctx, req.(*RetailerIDVersionID))
	}
	return interceptor(ctx, in, info, handler)
}

// Storage_ServiceDesc is the grpc.ServiceDesc for Storage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Storage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "storage.Storage",
	HandlerType: (*StorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRetailerList",
			Handler:    _Storage_GetRetailerList_Handler,
		},
		{
			MethodName: "GetRetailerByID",
			Handler:    _Storage_GetRetailerByID_Handler,
		},
		{
			MethodName: "DeleteRetailer",
			Handler:    _Storage_DeleteRetailer_Handler,
		},
		{
			MethodName: "DeleteRetailerVersion",
			Handler:    _Storage_DeleteRetailerVersion_Handler,
		},
		{
			MethodName: "History",
			Handler:    _Storage_History_Handler,
		},
		{
			MethodName: "GetRetailerVersion",
			Handler:    _Storage_GetRetailerVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/storage/storage.proto",
}
